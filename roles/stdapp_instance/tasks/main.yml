---

  - name: "template check log"
    template:
      src: app_check.j2
      dest: "{{ base_prod_ansible_log }}/{{ app_instance_id }}.log"

  - name: "fetch check log"
    fetch:
      src: "{{ base_prod_ansible_log }}/{{ app_instance_id }}.log"
      dest: "{{ app_instance_id }}.log"
      flat: yes

  - name: "letsencrypt certificate for {{ app_domain }}"
    command: "{{ certbot_grant_command }}"
    args:
      creates: "{{ letsencrypt_cert_root }}/{{ app_domain | quote }}"
    vars:
      letsencrypt_domain: "{{ app_domain }}"

  - name: "create database user {{ instance_database_user }}"
    postgresql_user:
      name: "{{ instance_database_user | mandatory }}"
      password: "{{ instance_database_password | mandatory }}"
      state: present
    become_user: postgres
    vars:
      ansible_ssh_pipelining: true

  - name: "create database {{ instance_database_name }}"
    postgresql_db:
      name: "{{ instance_database_name | mandatory }}"
      owner: "{{ instance_database_user | mandatory }}"
      encoding: UTF-8
      lc_collate: fr_FR.UTF-8
      lc_ctype: fr_FR.UTF-8
      template: template0
      state: present
    become_user: postgres
    vars:
      ansible_ssh_pipelining: true

  - name: create temporary download directory
    tempfile:
      state: directory
      suffix: "_app_new"
    register: _tmp_new_app
    changed_when: False

  - name: "retrieving app version {{ app_version }} in {{ _tmp_new_app.path }}"
    unarchive:
      src: "{{ app_src }}"
      dest: "{{ _tmp_new_app.path }}"
      remote_src: True
      group: "www-data"
      owner: "www-data"
    args:
      creates: "{{ app_instance_root }}"

  - name: "Move {{ _tmp_new_app.path }}/{{ app_src_root_name }} to {{ app_instance_root }}"
    command: "/bin/mv {{ _tmp_new_app.path }}/{{ app_src_root_name }} {{ app_instance_root }}"
    args:
      creates: "{{ app_instance_root }}"

#  - name: "dir {{ www_root }}/{{ app_instance_id }}.data"
#    file:
#      path: "{{ www_root }}/{{ app_instance_id }}.data"
#      state: directory
#      mode: 0755
#      group: "www-data"
#      owner: "www-data"

#  - name: "link data directory"
#    file:
#      state: link
#      src: "{{ app_instance_root }}.data"
#      path: "{{ app_instance_root }}/data"

  - name: "remove {{ _tmp_new_app.path }}"
    file:
      path: "{{ _tmp_new_app.path }}"
      state: absent
    changed_when: False

  - name: "template for backup"
    template:
      src: app_backup.j2
      dest: "{{ backup_item_dir }}/20-{{ app_instance_id }}.sh"
      mode: 0640

  - name: "log dest {{ www_log }}/{{ app_instance_id }}"
    file:
      state: directory
      path: "{{ www_log }}/{{ app_instance_id }}"

  - name: "template app_{{ rev_proxy }}.j2 {{ app_instance_id }}"
    template:
      src: "app_{{ rev_proxy }}.j2"
      dest: "/etc/{{ rev_proxy }}/sites-available/{{ app_instance_id }}.conf"
    notify: reload {{ rev_proxy }}

  - name: "logrotate for log {{ rev_proxy }} log_dest /{{ app_instance_id }}"
    template:
      src: app_logrotate_{{ rev_proxy }}.j2
      dest: "/etc/logrotate.d/{{ app_instance_id }}"
      mode: 0644

  - name: "enable site for {{ app_domain }}"
    file:
      state: link
      path: "/etc/{{ rev_proxy }}/sites-enabled/{{ app_instance_id }}.conf"
      src: "/etc/{{ rev_proxy }}/sites-available/{{ app_instance_id }}.conf"
    notify: reload {{ rev_proxy }}

  - name: "template for monitoring {{ app_domain }}"
    template:
      src: "app_monit.j2"
      dest: "/etc/monit/conf.d/{{ app_instance_id }}.conf"
    notify: reload monit
